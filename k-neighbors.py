import matplotlib.pyplot as plt
bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

# 앞에서 준비했던 도미와 빙어 데이터를 하나의 데이터로 합친다.
# 파이썬에서는 두 리스트를 더하면 하나의 리스트로 만들어준다.
length = bream_length + smelt_length
weight = bream_weight + smelt_weight

# 사이킷런을 사용하기 위해 각 특성의 리스트를 세로 방향으로 늘어뜨린 2차원 리스트를 만들어야한다.
# 파이썬의 zip() 함수와 리스트 내포 구문을 사용한다.
fish_data = [[l, w] for l, w in zip(length, weight)]
# zip() 함수는 나열된 리스트에서 원소를 하나씩 꺼내주는 일을 한다.
# 이렇게 하나씩 꺼낸 데이터를 반복문(for)을 이용하여 동일한 작업을 반복한다.
# for문은 zip() 함수로 length 와 weight 리스트에서 원소를 하나씩 꺼내어 l과 w에 할당한다.
# 그러면 [l, w]가 하나의 원소로 구성된 리스트가 만들어진다.
print(fish_data)

# 이러한 리스트를 2차원 리스트 혹은 리스트의 리스트라고 부른다.
# 생선 49개의 길이와 무게를 모두 준비했다. -> 이제 정답 데이터를 준비한다.
# 머신러닝 알고리즘은 생선의 길이와 무게를 보고 도미와 빙어를 구분하는 규칙을 만들어야한다.
# 그렇게 하려면 적어도 어떤 생선이 도미인지 빙어인지 알려줘야한다.
# 도미는 1로, 빙어는 0으로 정답 데이터를 생성한다.
# 즉, 도미는 35마리이므로 1이 35번, 빙어는 14마리이므로 0이 14번 리스트에 등장하면 된다.
fish_target = [1] * 35 + [0] * 14
print(fish_target)

# k-최근접 이웃 알고리즘을 사용하기 위해 KNeighborsClassifier를 임포트한다.
from sklearn.neighbors import KNeighborsClassifier

# 임포트한 KNeighborsClassifier 클래스의 객체를 먼저 만든다.
kn = KNeighborsClassifier()
# 이 객체(kn)에 fish_data와 fish_target을 전달하여 도미를 찾기 위한 기준을 학습시킨다.
# 이러한 과정을 훈련(training)이라고 한다.
# 사이킷런에서는 훈련과정을 fit()메서드가 담당한다.
kn.fit(fish_data, fish_target)
# fit()메서드는 주어진 데이터로 알고리즘을 훈련시킨다.

# 훈련한 모델을 평가하기 위해서 사이킷런에서는 score()메서드를 사용한다.
# score() 메서드는 0에서 1사이의 값을 반환한다.
# 1에 가까울수록 정확도가 높다.
kn.score(fish_data, fish_target)

# k-최근접 이웃 알고리즘은 어떤 데이터에 대한 답을 구할 때 주위의 다른 데이터를 보고 다수를 차지하는 것을 정답으로 사용한다.

# 사이킷런에서 predict() 메서드는 새로운 데이터의 정답을 예측한다.
# 이 메서드(predict())도 fit() 메서드와 마찬가지로 리스트의 리스트를 전달해야한다.
# 새로운 데이터를 예측해보자
kn.predict([[30, 600]])
plt.scatter(bream_length, bream_weight) # 파랑
plt.scatter(smelt_length, smelt_weight) # 주황
plt.scatter([30],[600]) # 초록
plt.xlabel("length")
plt.ylabel("weight")
plt.show()
# k-최근접 이웃 알고리즘은 새로운 데이터에 대해 예측할 때는 가장 가까운 직선거리에 어떤 데이터가 있는지 살피기만 하면 된다.
# 단점은 k-최근접 이웃 알고리즘의 이런 특징 때문에 데이터가 아주 많은 경우 사용하기 어렵다.
# 데이터가 크기 때문에 메모리가 많이 필요하고 직선거리를 계산하는 데도 많은 시간이 필요하다.

# 사이킷런의 KNeighborsClassifier 클래스는 _fit_X 속성에 우리가 전달한 fish_data를 모두 가지고 있다.
# 사이킷런의 KNeighborsClassifier 클래스는 _y 속성에 fish_target을 가지고 있다.
print(kn._fit_X)
print(kn._y)

# 실제로 k-최근접 이웃 알고리즘은 무언가 훈련되는게 없다.
# fit() 메서드에 전달한 데이터를 모두 저장하고 있다가 새로운 데이터가 등장하면 가장 가까운 데이터를 참고하여 도미인지 빙어인지 구분한다.
# 그럼 가까운 몇 개의 데이터를 참고하는가? <- 초 매개변수 즉, 사람이 정한다.
# KNeighborsClassifier 클래스의 기본값은 5이다.
# 이 기준은 n_neighbors 매개변수로 바꿀 수 있다.
kn49 = KNeighborsClassifier(n_neighbors=49) # 참고 데이터를 49개로 한 kn49 모델
# 즉, 참고하는 데이터가 49개이면 도미가 35개이므로 무조건 도미로 예측한다.
kn49.fit(fish_data, fish_target) # fit(훈련 데이터, 정답 데이터)
kn49.score(fish_data, fish_target) # 훈련한 모델의 정확도 평가

# 정확도 계산
print(35/49) # 전체 49개 중 도미 35개